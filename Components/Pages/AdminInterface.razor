@page "/AdminInterface"
@attribute [RenderModeInteractiveServer]
@inject NavigationManager NavigationManager

<PageTitle>AdminInterface</PageTitle>
<h1>staff</h1>

@if(SessionDetails.IsLoggedIn == true)
{
    <p>Logged in as Admin <button class="btn btn-primary" @onclick="() => LogOut()">Log Out</button></p>
    switch (Mode)
    {
        case 0:
        <div>
            <button class="btn btn-primary" @onclick="() => AdmineChoice(1)">Add or remove a room</button>
            <div class = "divider"/>
            <button class="btn btn-primary" @onclick="() => AdmineChoice(2)">Check-in guest</button>
            <div class = "divider"/>
            <button class="btn btn-primary" @onclick="() => AdmineChoice(3)">Check-out guest</button>
            <div class = "divider"/>
            <button class="btn btn-primary" @onclick="() => AdmineChoice(4)">Check room availability</button>
        </div>    
        break;

        case 1:
        switch (IntAddRemove)
        {
            case 0:
            <p>Do you want to add or remove a room?</p>
            <div>
            <button class="btn btn-primary" @onclick="() => AddRemove(1)">Add</button>
            <button class="btn btn-primary" @onclick="() => AddRemove(2)">Remove</button>
            </div>
            break;

            case 1:
            <EditForm Model="@Model" OnSubmit="@Submit">
            <p>Room number  <InputText @bind-Value="Model.RoomNr" /></p>
            <p>Description  <InputText @bind-Value="Model.Description" /></p>
            <p>Room price  <InputNumber @bind-Value="Model.RoomPrice" /></p>
            <p>Max capacity  <InputNumber @bind-Value="Model.Capacity" /></p> 
            <p>Floor number  <InputNumber @bind-Value="Model.FloorNr" /></p>       
            <button type="submit">Submit</button> 
            <button class="btn btn-primary" @onclick="() => AddRemove(0)">Back</button>
            </EditForm>
            
            break;

            case 2:

            if(Hotel.Rooms.Count == 0)
            {
                <p>No rooms available to remove in the hotel</p>
            }
            for(int i = 0; i < Hotel.Rooms.Count; i++)
            {
                Count count = new Count();
                count.c = i;
                <p>@Hotel.Rooms[i]</p>
                <button class="btn btn-primary" @onclick="() => RemoveRoom(count.c)">Remove</button>
            }
            <button class="btn btn-primary" @onclick="() => AddRemove(0)">Back</button>
            break;
        }
        <button class="btn btn-primary" @onclick="() => AdmineChoice(0)">Back</button>
        break;
        
        case 2:

            for(int i = 0; i < Hotel.Rooms.Count; i++)
                {
                    if(Hotel.Rooms[i].roomBookings.Count > 0 &&
                       Hotel.Rooms[i].roomBookings.Exists(x => x.IsChecked.Equals(false)))
                    {
                        
                        <h1>@Hotel.Rooms[i].RoomNr @Hotel.Rooms[i].Description</h1>
                        int x = 0;
                        foreach(Booking b in Hotel.Rooms[i].roomBookings)
                        {
                            if(b.IsChecked == false)
                            {
                                Count c  = new Count();
                                c.booking = b;
                                <p>@b.Guest.Name <br /> @b.BookingPeriod</p>
                                <button class="btn btn-primary" @onclick="() => CheckIn(c.booking)">Check in</button>
                                x++;
                            }
                        }
                    }
                }
            <button class="btn btn-primary" @onclick="() => AdmineChoice(0)">Back</button>
           
        break;
        
        case 3:
            <h1>Currently checked in guests</h1>
            for(int i = 0; i < Hotel.Rooms.Count; i++)
            {

                if(Hotel.Rooms[i].roomBookings.Exists(x => x.IsChecked.Equals(true)))
                {
                    foreach(Booking b in Hotel.Rooms[i].roomBookings)
                        {
                            if(b.IsChecked == true)
                            {
                                Count c = new Count();
                                c.room = Hotel.Rooms[i];
                                c.booking = b;
                                <p>@b.Guest.Name <br /> @((MarkupString)b.ToString())</p>
                                <button class="btn btn-primary" @onclick="() => CheckOut(c.room, c.booking)">Check Out</button>

                                
                            }
                        }
                }
            }<button class="btn btn-primary" @onclick="() => AdmineChoice(0)">Back</button>
        break;
        
        case 4:
            foreach(Room r in Hotel.Rooms)
            {
                string body = r.ToString();
                if(r.roomBookings.Exists(x => x.IsChecked == true))
                {
                    body += "<br /><b>Status:</b> Unavailable";
                }
                else
                {
                    body += "<br /><b>Status:</b> Available";
                }
                <p>
                @((MarkupString)body)
                </p>
            }
            <button class="btn btn-primary" @onclick="() => AdmineChoice(0)">Back</button>
            break;
    }
<p>@ErrorMsg</p>
} 
else
{
    <p>Need to be logged in to access Admin functions</p>
    <button class="btn btn-primary" @onclick="() => LogOut()">Main menu</button>
}



@code
{
    protected override void OnInitialized() => Model ??= new();
    private string ErrorMsg = "";
    private Room? Model {get; set;}
    private int IntAddRemove = 0;
    private int Mode = 0;

    class Count
    {
        public Room room; 
        public Booking booking;

        public int c;
    }

    void LogOut()
    {
        SessionDetails.IsLoggedIn = false;
        NavigationManager.NavigateTo("Hoteltest");
    }

    void AdmineChoice(int i)
    {
        Mode = i;
        ErrorMsg = "";

    }

    void AddRemove(int i)
    {
        IntAddRemove = i;
        ErrorMsg = "";
    }

    void RemoveRoom(int i)
    {
        Hotel.RemoveRoom(i);
    }

    void CheckIn(Booking b)
    {
        Hotel.CheckIn(b);
        ErrorMsg = $"has been check-in succesfully";
    }

    void CheckOut(Room r ,Booking b)
    {
        Hotel.CheckOut(b, r);
        ErrorMsg =$"Check-out succesfull";
    }

    private void Submit()
    {
        Room room = new Room(Model.RoomNr, Model.Description, Model.RoomPrice, Model.Capacity, Model.FloorNr);

        if(Model.RoomNr != null && Model.Description != null && Model.RoomPrice != 0 && 
           Model.Capacity !=0 && Model.FloorNr != 0)
        {
            Hotel.AddRoom(room, out string outputMessage);
            ErrorMsg = outputMessage;
        }
        else
        {
            ErrorMsg = "Error, all fields must be filled in";
        }
    }
}