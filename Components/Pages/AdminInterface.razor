@page "/AdminInterface"
@attribute [RenderModeInteractiveServer]
@inject NavigationManager NavigationManager

<PageTitle>AdminInterface</PageTitle>
<h1 style="font-family:Times New Roman">Staff Menu</h1>
<!--if statmens that chech if admin is logged in, option to log out if thats true-->
@if(SessionDetails.IsLoggedIn == true)
{
    //a admin interface menu 
    switch (Mode)
    {   
        
        case 0:
        <p>Please select an option below</p>
        <div>
            <button class="btn btn-primary" @onclick="() => AdmineChoice(1)">Add or remove a room</button>
            
            <button class="btn btn-primary" @onclick="() => AdmineChoice(2)">Check-in guest</button>
            
            <button class="btn btn-primary" @onclick="() => AdmineChoice(3)">Check-out guest</button>
            
            <button class="btn btn-primary" @onclick="() => AdmineChoice(4)">Check room availability</button>
        </div>    
        break;

        case 1:
        //add and remove room options for admin
        switch (IntAddRemove)
        {
            case 0:
            <p>Do you want to add or remove a room?</p>
            <div>
            <button class="btn btn-primary" @onclick="() => AddRemove(1)">Add</button>
            <button class="btn btn-primary" @onclick="() => AddRemove(2)">Remove</button>
            </div>
            <div style="margin-top: 5px;">
            <button class="btn btn-primary" @onclick="() => AdmineChoice(0)">Back</button>
            </div>
            break;

            case 1:
            //an editform that specifies the room details for that is to be added
            <EditForm Model="@Model" OnSubmit="@Submit">
            <p>Room number  <InputText @bind-Value="Model!.RoomNr" /></p>
            <p>Description  <InputText @bind-Value="Model.Description" /></p>
            <p>Room price  <InputNumber @bind-Value="Model.RoomPrice" /></p>
            <p>Max capacity  <InputNumber @bind-Value="Model.Capacity" /></p> 
            <p>Floor number  <InputNumber @bind-Value="Model.FloorNr" /></p>       
            <button type="submit">Submit</button> 
            <div style="margin-top: 5px;">
            <button class="btn btn-primary" @onclick="() => AddRemove(0)">Back</button>
            </div>
            </EditForm>
            
            break;

            
            case 2:
            //an if statmnet that list rooms available to be removed
            if(Hotel.Rooms.Count == 0)
            {
                <p>No rooms available to remove in the hotel</p>
            }
            for(int i = 0; i < Hotel.Rooms.Count; i++)
            {
                Count count = new Count();
                count.room = Hotel.Rooms[i];
                <p style="border-style : solid; border-width : 2px; padding-left : 5px; width : 400px;">@((MarkupString)Hotel.Rooms[i].ToString())<br />
                <button style="margin-bottom: 5px; margin-top: 10px"class="btn btn-primary" @onclick="() => RemoveRoom(count.room)">Remove</button></p>
            }
            <div style="margin-top: 5px;">
            <button class="btn btn-primary" @onclick="() => AddRemove(0)">Back</button>
            </div>
            break;
        }
        break;
        
        case 2:
            tempBookings = new List<Booking>();
            //a for loop that list existing rooms that have not yet been checked in
            for(int i = 0; i < Hotel.Rooms.Count; i++)
            {
                if(Hotel.Rooms[i].roomBookings.Count > 0 &&
                    Hotel.Rooms[i].roomBookings.Exists(x => x.IsChecked.Equals(false)))
                {
                    //a forech loop that list every booking for that room that has not been checked in
                    foreach(Booking b in Hotel.Rooms[i].roomBookings)
                    {
                        if(b.IsChecked == false && !tempBookings.Exists(x => x == b))
                        {
                            tempBookings.Add(b);
                        }
                    }
                }
            }
            if(tempBookings.Count > 0)
            {
                foreach(Booking b in tempBookings)
                {
                    if(b.IsChecked == false)
                    {
                        Count c  = new Count();
                        c.booking = b;
                        <p style="border-style : solid; border-width : 2px; padding-left : 5px; width : 400px;"><b>@b.Guest!.Name</b> <br /> @((MarkupString)b.BookingPeriod!.ToString()) <br /> @((MarkupString)CheckableRooms(b))
                        <br /><button style="margin-bottom: 5px; margin-top: 10px" class="btn btn-primary" @onclick="() => CheckIn(c.booking)">Check in</button>
                        </p>
                    }
                }
            }
            else
            {
                <h2>Currently no bookings to check-in</h2>
            }
            <div>
            <button class="btn btn-primary" @onclick="() => AdmineChoice(0)">Back</button>
            </div>
           
        break;
        
        case 3:
            tempBookings = new List<Booking>();
            if(CurrentlyCheckedIn())
            {
                <h2>Currently checked in guests</h2>
            }
            else
            {
                <h2>No guest currently checked in</h2>
            }
            
            
            //for loops that list available rooms to check out
            for(int i = 0; i < Hotel.Rooms.Count; i++)
            {

                if(Hotel.Rooms[i].roomBookings.Exists(x => x.IsChecked.Equals(true)))
                {
                    //foreach loop that list checked in bookings
                    foreach(Booking b in Hotel.Rooms[i].roomBookings)
                        {
                            if(b.IsChecked == true && !tempBookings.Exists(x => x == b))
                            {
                                tempBookings.Add(b);
                            }
                        }
                }
            }
            foreach(Booking b in tempBookings)
            {
                if(b.IsChecked == true)
                {
                    Count c  = new Count();
                    c.booking = b;
                    <p style="border-style : solid; border-width : 2px; padding-left : 5px; width : 400px;"><b>@b.Guest!.Name</b> <br /> @((MarkupString)b.BookingPeriod!.ToString()) <br /> @((MarkupString)CheckableRooms(b))</p>
                    <button style="margin-bottom: 5px; margin-top: 10px" class="btn btn-primary" @onclick="() => CheckOut(c.booking)">Check Out</button>
                }
            }
            <div style="margin-top: 5px;">
            <button class="btn btn-primary" @onclick="() => AdmineChoice(0)">Back</button>
            </div>
        break;
        
        case 4:
            //a foreach loop that list all rooms at the hotel and theis current status
            foreach(Room r in Hotel.Rooms)
            {
                string body = r.ToString();
                if(r.roomBookings.Exists(x => x.IsChecked == true))
                {
                    body += "<br /><b>Status:</b> Unavailable";
                }
                else
                {
                    body += "<br /><b>Status:</b> Available";
                }
                <p>
                @((MarkupString)body)
                </p>
            }
            <div style="margin-top: 5px;">
            <button class="btn btn-primary" @onclick="() => AdmineChoice(0)">Back</button>
            </div>
            break;
    }
<p style="margin-top: 25px"><i>@ErrorMsg</i></p>
} 
else
{
    <p>Need to be logged in to access Admin functions</p>
    <button class="btn btn-primary" @onclick="() => MovePage()">Main menu</button>
}



@code
{
    protected override void OnInitialized() => Model ??= new();
    private string ErrorMsg = "";
    private Room? Model {get; set;}
    private int IntAddRemove = 0;
    private int Mode = 0;

    List<Booking> tempBookings = new List<Booking>();

    class Count
    {
        public Room? room; 
        public Booking? booking;
    }

    //a log ou method, navigates back to home when logges out
    void MovePage()
    {
        NavigationManager.NavigateTo("");
    }

    //a method that controlls the admin menu and restets details
    void AdmineChoice(int i)
    {
        Mode = i;
        ErrorMsg = "";

    }

    string CheckableRooms(Booking b)
    {
        string roomString = "<b>Rooms:</b> ";
        foreach(Room r in b.BookedRooms)
        {
            roomString += $"{r.RoomNr}. '{r.Description}' ";
        }
        return roomString;
    }

    //a method that controlls the addremove room admin menu
    void AddRemove(int i)
    {
        IntAddRemove = i;
        ErrorMsg = "";
    }

    //a method that controlls removeroom
    void RemoveRoom(Room r)
    {
        Hotel.RemoveRoom(r);
        ErrorMsg = $"Room '{r.RoomNr}. {r.Description}' removed successfully";
    }

    //a methodthat checks in a specific booking
    void CheckIn(Booking b)
    {
        Hotel.CheckIn(b);
        ErrorMsg = $"Check-in successful";
    }

    //a method that checksout a specific booking
    void CheckOut(Booking b)
    {
        Hotel.CheckOut(b);
        ErrorMsg = $"Check-out succesful";
    }

    //a method that checks that all feilds are filled in and add if thats the case
    private void Submit()
    {
        Room room = new Room(Model!.RoomNr!, Model.Description!, Model.RoomPrice, Model.Capacity, Model.FloorNr);

        if(Model.RoomNr != null && Model.Description != null && Model.RoomPrice != 0 && 
           Model.Capacity !=0 && Model.FloorNr != 0)
        {
            Hotel.AddRoom(room, out string outputMessage);
            ErrorMsg = outputMessage;
        }
        else
        {
            ErrorMsg = "Error, all fields must be filled in";
        }
    }

    bool CurrentlyCheckedIn()
    {
        foreach(Room r in Hotel.Rooms)
        {
            if(r.roomBookings.Exists(x => x.IsChecked.Equals(true)))
            {
                return true;
            }

        }
        return false;

    }
    
}