@page "/"
@page "/logout/{LogOut:bool}"
@attribute [RenderModeInteractiveServer]
@inject NavigationManager NavigationManager

<PageTitle>Hotel</PageTitle>

@if(LogOut == true)
{
    LogOutMethod();
}

<h1 style="font-family:Times New Roman">Hotel Management Software</h1>


@if(SessionDetails.SessionGuest == null && SessionDetails.IsLoggedIn == false)
{
    <!-- A switch menu for picking between guest or staff-->
    @switch(MenuChoice)
    {
    case 0:
        <p>Please select an option below</p>
        <button class="btn btn-primary" @onclick="() => MainMenu(1)">Guest</button>    <button class="btn btn-primary" @onclick="() => MainMenu(2)">Staff</button> 
    break;
    case 1:
        <!--a switch menu for logging in or signing up as a guest -->
        switch(GuestChoice)
        {
            case 0:
                <p>Please select an option below</p>
                <button class="btn btn-primary" @onclick="() => GuestMenu(1)">Log In</button>    <button class="btn btn-primary" @onclick="() => GuestMenu(2)">Sign Up</button>
                <button class="btn btn-primary" @onclick="() => MainMenu(0)">Back</button>
            break;
            
            case 1:
                <p>Logging in as guest</p>
                <!--a form model where the user can atempt to login with password and email -->
                <EditForm Model="@Model" OnSubmit="@Submit">
                <p>Email  <InputText @bind-Value="Model!.Email" /></p>
                <p>Password  <InputText type="password" autocomplete="off" @bind-Value="Model!.Password" /></p>
                <button type="submit">Submit</button> <button class="btn btn-primary" @onclick="() => GuestMenu(0)">Back</button>
                </EditForm>
                
            break;
            case 2:
                <p>Please fill out the sign-up form</p>
                <!--a form where the guest signs up with Name, phone number, email and password-->
                <EditForm Model="@Model" OnSubmit="@SignUp">
                <p>Name  <InputText @bind-Value="Model!.Name" /></p>
                <p>Phone Number  <InputText @bind-Value="Model!.PhoneNr" /></p>
                <p>Email  <InputText @bind-Value="Model!.Email" /></p>
                <p>Password  <InputText @bind-Value="Model!.Password" /></p>
                <button type="submit">Submit</button> <button class="btn btn-primary" @onclick="() => GuestMenu(0)">Back</button>
                </EditForm>
                
            break;
        }
    break;
    case 2:
        <p>Logging in as admin</p>
        <!--A form model for admin to login with the admin password-->
        <EditForm Model="@Admin" OnSubmit="@AdminLogIn">
        <p>Password  <InputText type="password" autocomplete="off" @bind-Value="Admin!.AdminPassword" /></p>
        <button type="submit">Submit</button> <button class="btn btn-primary" @onclick="() => MainMenu(0)">Back</button>
        </EditForm>
        
    break;
    }
    <p style="margin-top: 25px;"><i>@ErrorMsg</i></p>
}
else if(SessionDetails.SessionGuest != null)
{
    <p><button class="btn btn-primary" @onclick="() => MovePage(1)">Guest Menu</button></p>
}
else if(SessionDetails.IsLoggedIn! == true)
{
    <p><button class="btn btn-primary" @onclick="() => MovePage(2)">Admin Menu</button></p>
}


@code
{
    private Guest? Model { get; set; }
    protected override void OnInitialized() => Model ??= new(null!, null!, null!, null!);
    private string ErrorMsg = "";
    private int MenuChoice = 0;
    private int GuestChoice = 0;
    private AdminInterfaceSubmit? Admin {get; set;}

    class AdminInterfaceSubmit
    {
        public string? AdminPassword {get; set;}
    }

    
    //a methode that ereases the admin login password and switching menu options
    private void MainMenu(int i)
    {
        Admin = new AdminInterfaceSubmit();
        MenuChoice = i;
        ErrorMsg = "";
    }
    //a methode that ereases the guest details and switching options
    private void GuestMenu(int i)
    {
        Model = new Guest(null!, null!, null!, null!);
        GuestChoice = i;
        ErrorMsg = "";
    }

    //a method that tries to call on the the LoginAttempt method and sets to current sessionguest if succesfull
    private void Submit()
    {
        Guest guest = GuestList.LogInAttempt(Model!.Email, Model.Password, out string outputMessage);
        if(guest == null)
        {
            ErrorMsg = outputMessage;
        }
        else
        {
            SessionDetails.SessionGuest = guest;
            ErrorMsg = outputMessage;
            MovePage(1);
        }
    }

    private void MovePage(int page)
    {
        switch(page)
        {
            case 1:
                NavigationManager.NavigateTo("GuestInterface");
            break;
            case 2:
                NavigationManager.NavigateTo("AdminInterface");
            break;
        }
    }

    //a method for guest to sign up, checks if successfull or tells that some fields are missing. navigates to the guestinterface if succesfull
    private void SignUp()
    {
        var guest = new Guest(Model!.Name, Model.PhoneNr, Model.Email, Model.Password);
        if(Model.Name != null && Model.PhoneNr != null && Model.Email != null && Model.Password !=null)
        {
            GuestList.AddGuest(guest, out string outputMessage);
            ErrorMsg = outputMessage;
            if(outputMessage == "Signup succesful")
            {
            SessionDetails.SessionGuest = guest;
            MovePage(1);
            }
        }
        else
        {
            ErrorMsg = "Error, all fields must be filled in";
        }
    }

    //checks the admin password then navigates to the adminInterface
    private void AdminLogIn()
    {
        if(Admin!.AdminPassword == Hotel.Password)
        {
            SessionDetails.IsLoggedIn = true;
            MovePage(2);
        }
        else
        {
            ErrorMsg = "Error, incorrect password";
        }
        
    }

    private void LogOutMethod()
    {
        SessionDetails.LogOut();
        LogOut = false;
        NavigationManager.NavigateTo("");
    }

    [Parameter]
    public bool? LogOut {get; set;}
}