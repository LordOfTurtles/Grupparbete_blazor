@page "/GuestInterface"
@attribute [RenderModeInteractiveServer]
@inject NavigationManager NavigationManager
@using System.Web
@using System.Text.RegularExpressions;
<style>
    .divider{
    width:auto;
    height:5px;
    display:inline-block;
    }
</style>
@if(Hotel.SessionGuest == null)
{
    <p>Need to be logged in to access guest functions</p>
    <button class="btn btn-primary" @onclick="() => LogOut()">Main menu</button>
}
else
{
    <p>Logged in as @Hotel.SessionGuest!.Name <button class="btn btn-primary" @onclick="() => LogOut()">Log Out</button></p>
    switch(option)
    {
        case 0:
        <div>
            <button class="btn btn-primary" @onclick="() => GuestChoice(1)">Check availability</button>
            <div class = "divider"/>
            <button class="btn btn-primary" @onclick="() => GuestChoice(2)">Start a new booking</button>
            <div class = "divider"/>
            <button class="btn btn-primary" @onclick="() => GuestChoice(3)">Write a review</button>
            <div class = "divider"/>
            <button class="btn btn-primary" @onclick="() => GuestChoice(4)">Read reviews</button>
        </div>
        break;
        case 1:
            foreach(Room r in Hotel.Rooms)
            {
                <p>
                @((MarkupString)r.ToString())
                </p>
            }
        break;
        case 2:
        
        break;
        case 3:

        break;
        case 4:
        
        break;
    }
}

@code
{
    static int option;
    static void GuestChoice(int i)
    {
        option = i;
    }
    private void LogOut()
    {
        NavigationManager.NavigateTo("hoteltest");
        Hotel.SessionGuest = null;
    }

    private string RoomToHTML(Room r)
    {
        string body = $"{r}";
        string html = body.Replace(@"\n", "<br/>");

        return html;
    }
}

