@page "/GuestInterface"
@attribute [RenderModeInteractiveServer]
@inject NavigationManager NavigationManager
@using System.Web
@using System.Text.RegularExpressions;

<!--checks if there is currently a guest whos logged in -->
@if(SessionDetails.SessionGuest == null)
{
    <p>Need to be logged in to access guest functions</p>
    <button class="btn btn-primary" @onclick="() => LogOut()">Main menu</button>
}
else
{

    //a switch statment for guest menu options
    switch(option)
    {
        case 0:
        <div>
            <button class="btn btn-primary" @onclick="() => GuestChoice(1)">Check availability</button>
            
            <button class="btn btn-primary" @onclick="() => GuestChoice(2)">Start a new booking</button>
            
            <button class="btn btn-primary" @onclick="() => GuestChoice(3)">Write a review</button>
            
            <button class="btn btn-primary" @onclick="() => GuestChoice(4)">Read reviews</button>
        </div>
        break;
        //checks room availability in hotels.roms
        case 1:
            foreach(Room r in Hotel.Rooms)
            {
                <p>
                @((MarkupString)r.ToString())
                </p>
            }
            <button class="btn btn-primary" @onclick="() => GuestChoice(0)">Back</button>
        break;
        //lets guest create a booking with room and dates
        case 2:
        //a form where the guest specifies what the guest is looking for
        <EditForm Model="@Model" OnSubmit="@Submit">
        <p>What is your max price per night?  <InputNumber @bind-Value="Model!.room.RoomPrice" /></p>
        <p>How many guests are staying?  <InputNumber @bind-Value="Model.room.Capacity" /></p>
        <p>What date would you like to start your booking?  <InputDate @bind-Value="Model.startDate" /></p>
        <p>What date would you like to end your booking?  <InputDate @bind-Value="Model.endDate" /></p> 
        <button type="submit">Submit</button> 
        <button class="btn btn-primary" @onclick="() => GuestChoice(0)">Back</button>
        </EditForm>

        // an if statment that check if theres any rooms that matches the guests inputs, also checks so no bookings can overlap with the desired booking period
        if(tempRooms.Count() > 0)
        {
            foreach(Room r in tempRooms)
            {
                safe ++;
                <p>@((MarkupString)r.ToString())</p>
                if(Guest.CompareDates(tempDates!.startDate, tempDates.endDate, r) == true)
                {
                    if(desiredRoom.Exists(x => x == r))
                    {
                        <p>
                        <button class="btn btn-primary" @onclick="() => RemoveRoom(r)">Remove from booking</button>
                        </p>
                    }
                    else
                    {
                        <p>
                        <button class="btn btn-primary" @onclick="() => AddRoom(r)">Add to booking</button>
                        </p>
                    }
                    
                }
                else
                {
                    if(BookingOwner(r))
                    {
                        <p> This room is already booked by you during period @tempDates.startDate - @tempDates.endDate</p>
                    }
                    else
                    {
                        <p>Room is already booked during period @tempDates.startDate - @tempDates.endDate</p>

                    }
                   
                }
                
            }
        }
        if(desiredRoom.Count > 0)
        {
            <p>
            <button class="btn btn-primary" @onclick="() => BookRoom(desiredRoom)">Book rooms</button>
            </p>
        }
        <p>@message</p>
        break;
        case 3:
        //if statment thats checks if the guest has any past bookings that they have not yet written a review for
        if(SessionDetails.SessionGuest.guestPastBookings.Count > 0 && SessionDetails.SessionGuest.guestPastBookings.Exists(x => x.Review == null))
        {
            if(tempBooking.Guest == null)
            {
                <p><b>Which booking would you like to write a review for?</b></p>
                foreach(Booking b in SessionDetails.SessionGuest.guestPastBookings)
                {
                    if(b.Review == null)
                    {
                    <p>
                        @((MarkupString)b.ToString())
                    </p>
                    <p>
                        <button class="btn btn-primary" @onclick="() => PickReview(b)">Review</button>
                    </p>
                    }
                }
            }
            else
            {
                <p>
                @((MarkupString)tempBooking.ToString())
                </p>
                <EditForm Model="@tempReview" OnSubmit="@Review">
                <div>
                    <InputTextArea class="form-control" style="height: 150px; width: 500px" @bind-Value="tempReview.review" />
                </div>
                <div>
                <button type="submit">Submit</button>
                </div>
                </EditForm>

            }
        }
        else
        {
            <p><b>No bookings available to review</b></p>
        }
        <div>
        <button class="btn btn-primary" @onclick="() => GuestChoice(0)">Back</button>
        </div>

        break;
        case 4:
        //chekcs if there is any bookings that the guest has written a review for
        if(SessionDetails.SessionGuest.guestPastBookings.Count > 0 && SessionDetails.SessionGuest.guestPastBookings.Exists(x => x.Review != null))
        {
            foreach(Booking b in SessionDetails.SessionGuest.guestPastBookings)
            {
                if(b.Review != null)
                {
                    <p>@((MarkupString)b.ToString())</p>
                    <p>"@b.Review"</p>
                }
            }
        }
        else
        {
            <p><b>No reviews made so far</b></p>
        }
        <div>
        <button class="btn btn-primary" @onclick="() => GuestChoice(0)">Back</button>
        </div>
        break;
    }
}

@code
{
    private string? review;
    private int safe = 0;
    private string message = "";
    private Temp? Model {get; set;}
    private Booking tempBooking = new Booking();
    private Temp? tempDates = new Temp();
    private TempReview tempReview = new TempReview();
    List<Room> tempRooms = new List<Room>();
    List<Room> desiredRoom = new List<Room>();

    protected override void OnInitialized() => Model ??= new();

    static int option = 0;

    //a method that controls guest menu options and resets editform data when stitching option
    private void GuestChoice(int i)
    {
        option = i;
        Model = new Temp();
        tempRooms.Clear();
    }

    //a method that logs out the guest and navigates to home
    private void LogOut()
    {
        NavigationManager.NavigateTo("");
        SessionDetails.SessionGuest = null;
    }

    //a method that compares the guest inputs for start and denddate, roomprice and capacity.
    private void Submit()
    {
        tempRooms.Clear();
        if(Model!.startDate < Model.endDate && Model.room.Capacity > 0)
        {
            foreach(Room r in Hotel.Rooms)
            {
                if(Model.room.RoomPrice >= r.RoomPrice && Model.room.Capacity <= r.Capacity)
                {
                    tempDates!.startDate = Model.startDate;
                    tempDates!.endDate = Model.endDate;
                    tempRooms.Add(r);
                    message = "";
                }

            }    
        }
        else if(Model.startDate >= Model.endDate)
        {
            message = "End date must be later than start date";
        }
        else
        {
            message = "Guests staying must be more than 0";
        }
    }

    //a method that books the specified room for the booking period if there are no overlaps
    private void BookRoom(List<Room> rooms)
    {
        Guest.BookRoom(rooms, tempDates!.startDate, tempDates.endDate, SessionDetails.SessionGuest!);
        desiredRoom = new List<Room>();
        message = "Booking successfull";
       
    }

    private void AddRoom(Room r)
    {
        desiredRoom.Add(r);
    }

    private void RemoveRoom(Room r)
    {
        desiredRoom.Remove(r);
    }

    //a method that sets which booking that are being reviwed
    private void PickReview(Booking b)
    {
        tempBooking = b;
    }

    //a method that saves the review to the booking
    private void Review()
    {
        tempBooking.Review = tempReview.review;
        tempBooking = new Booking();
    }

    bool BookingOwner(Room r)
    {
        foreach(Booking b in r.roomBookings)
        {
            if(b.Guest == SessionDetails.SessionGuest && !Guest.CompareDates(tempDates!.startDate, tempDates.endDate, r))
            {
                return true;
            }
        }
        return false;
    }

    class TempReview
    {
        public string review = "";
    }
    class Temp
    {
        public Room room = new Room();
        public DateOnly startDate = DateOnly.FromDateTime(DateTime.Now);
        public DateOnly endDate = DateOnly.FromDateTime(DateTime.Now);
    }
}

