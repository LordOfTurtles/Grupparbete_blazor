@page "/GuestInterface"
@attribute [RenderModeInteractiveServer]
@inject NavigationManager NavigationManager
@using System.Web
@using System.Text.RegularExpressions;
<style>
    .divider{
    width:auto;
    height:5px;
    display:inline-block;
    }
</style>
@if(Hotel.SessionGuest == null)
{
    <p>Need to be logged in to access guest functions</p>
    <button class="btn btn-primary" @onclick="() => LogOut()">Main menu</button>
}
else
{
    <p>Logged in as @Hotel.SessionGuest!.Name <button class="btn btn-primary" @onclick="() => LogOut()">Log Out</button></p>
    switch(option)
    {
        case 0:
        <div>
            <button class="btn btn-primary" @onclick="() => GuestChoice(1)">Check availability</button>
            <div class = "divider"/>
            <button class="btn btn-primary" @onclick="() => GuestChoice(2)">Start a new booking</button>
            <div class = "divider"/>
            <button class="btn btn-primary" @onclick="() => GuestChoice(3)">Write a review</button>
            <div class = "divider"/>
            <button class="btn btn-primary" @onclick="() => GuestChoice(4)">Read reviews</button>
        </div>
        break;
        case 1:
            foreach(Room r in Hotel.Rooms)
            {
                <p>
                @((MarkupString)r.ToString())
                </p>
            }
            <button class="btn btn-primary" @onclick="() => GuestChoice(0)">Back</button>
        break;
        case 2:
        
        <EditForm Model="@Model" OnSubmit="@Submit">
        <p>What is your max price per night?  <InputNumber @bind-Value="Model.room.RoomPrice" /></p>
        <p>How many guests are staying?  <InputNumber @bind-Value="Model.room.Capacity" /></p>
        <p>What date would you like to start your booking?  <InputDate @bind-Value="Model.startDate" /></p>
        <p>What date would you like to end your booking?  <InputDate @bind-Value="Model.endDate" /></p> 
        <button type="submit">Submit</button> 
        <button class="btn btn-primary" @onclick="() => GuestChoice(0)">Back</button>
        </EditForm>

        if(tempRooms.Count() > 0)
        {
            foreach(Room r in tempRooms)
            {
                safe ++;
                <p>@((MarkupString)r.ToString())</p>
                if(Guest.CompareDates(tempDates.startDate, tempDates.endDate, r) == true)
                {
                    <p>
                    <button class="btn btn-primary" @onclick="() => BookRoom(r)">Book this room</button>
                    </p>
                }
                else
                {
                    <p>Room is already booked during period @tempDates.startDate - @tempDates.endDate</p>
                }
            }
        }
        <p>@message</p>
        break;
        case 3:
        if(Hotel.SessionGuest.guestPastBookings.Count > 0)
        {
            if(tempBooking.Guest == null)
            {
                <p><b>Which booking would you like to write a review for?</b></p>
                foreach(Booking b in Hotel.SessionGuest.guestPastBookings)
                {
                    <p>
                        @((MarkupString)b.ToString())
                    </p>
                    <p>
                        <button class="btn btn-primary" @onclick="() => PickReview(b)">Review</button>
                    </p>
                }
            }
            else
            {
                <p>
                @((MarkupString)tempBooking.ToString())
                </p>
                <EditForm style="height: 300%; width: 300%" Model="@tempBooking" OnSubmit="@Review">
                <p><InputText @bind-Value="tempBooking.Review" /></p>
                <button type="submit">Submit</button>
                </EditForm>

            }
        }

        break;
        case 4:
        
        break;
    }
}

@code
{
    private string review;
    private int safe = 0;
    private string message = "";
    private Temp? Model {get; set;}
    private Booking tempBooking = new Booking();
    private Temp? tempDates = new Temp();

    protected override void OnInitialized() => Model ??= new();

    static int option = 0;
    private void GuestChoice(int i)
    {
        option = i;
        Model = new Temp();
        tempRooms.Clear();
    }
    private void LogOut()
    {
        NavigationManager.NavigateTo("hoteltest");
        Hotel.SessionGuest = null;
    }

    private string RoomToHTML(Room r)
    {
        string body = $"{r}";
        string html = body.Replace(@"\n", "<br/>");

        return html;
    }

    List<Room> tempRooms = new List<Room>();

    private void Submit()
    {
        tempRooms.Clear();
        if(Model.startDate < Model.endDate && Model.room.Capacity > 0)
        {
            foreach(Room r in Hotel.Rooms)
            {
                if(Model.room.RoomPrice >= r.RoomPrice && Model.room.Capacity <= r.Capacity)
                {
                    tempDates!.startDate = Model.startDate;
                    tempDates!.endDate = Model.endDate;
                    tempRooms.Add(r);
                    message = "";
                }

            }    
        }
        else if(Model.startDate >= Model.endDate)
        {
            message = "End date must be later than start date";
        }
        else
        {
            message = "Guests staying must be more than 0";
        }
    }

    private void BookRoom(Room r)
    {
        if(Guest.CompareDates(tempDates.startDate, tempDates.endDate, r) == true)
        {
        Guest.BookRoom(r, tempDates.startDate, tempDates.endDate, Hotel.SessionGuest);
        message = "Room successfully booked";
        }
    }

    private void PickReview(Booking b)
    {
        tempBooking = b;
    }

    private void Review()
    {
        
    }

    class Temp
    {
        public Room room = new Room();
        public DateOnly startDate = DateOnly.FromDateTime(DateTime.Now);
        public DateOnly endDate = DateOnly.FromDateTime(DateTime.Now);
    }
}

